#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

pthread_mutex_t forks[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *((int*)arg);
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 5);

        // Hungry
        printf("Philosopher %d is hungry and wants to eat.\n", id);
        state[id] = HUNGRY;

        // Check if both neighbors are not eating
        while (state[(id + 4) % NUM_PHILOSOPHERS] == EATING || state[(id + 1) % NUM_PHILOSOPHERS] == EATING) {
            pthread_mutex_lock(&forks[id]);
            pthread_mutex_unlock(&forks[id]);
        }

        // Got both forks
        pthread_mutex_lock(&forks[left]);
        pthread_mutex_lock(&forks[right]);
        state[id] = EATING;
        printf("Philosopher %d got both forks and is now eating.\n", id);
        sleep(rand() % 5);

        // Put down forks
        pthread_mutex_unlock(&forks[left]);
        pthread_mutex_unlock(&forks[right]);
        state[id] = THINKING;
        printf("Philosopher %d finished eating and is now thinking again.\n", id);
    }
    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes and philosopher states
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
        state[i] = THINKING;
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &ids[i]);
    }

    // Wait for threads to finish (should never happen)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    return 0;
}
