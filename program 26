#include<stdio.h>

struct Process {
    int burstTime;
    int priority;
};

void calculateWaitingTime(struct Process[], int, int[]);
void calculateTurnaroundTime(struct Process[], int, int[], int[]);

int main() {
    struct Process processes[] = {
        {30, 2},
        {5, 1},
        {12, 3}
    };
    int numProcesses = sizeof(processes) / sizeof(processes[0]);

    int waitingTime[numProcesses], turnaroundTime[numProcesses];
    float avgWaitingTime = 0, avgTurnaroundTime = 0;

    calculateWaitingTime(processes, numProcesses, waitingTime);
    calculateTurnaroundTime(processes, numProcesses, waitingTime, turnaroundTime);

    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < numProcesses; i++) {
        avgWaitingTime += waitingTime[i];
        avgTurnaroundTime += turnaroundTime[i];
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i].burstTime, processes[i].priority, waitingTime[i], turnaroundTime[i]);
    }

    avgWaitingTime /= numProcesses;
    avgTurnaroundTime /= numProcesses;

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);

    return 0;
}

void calculateWaitingTime(struct Process processes[], int numProcesses, int waitingTime[]) {
    waitingTime[0] = 0;

    for (int i = 1; i < numProcesses; i++) {
        waitingTime[i] = processes[i - 1].burstTime + waitingTime[i - 1];
    }
}

void calculateTurnaroundTime(struct Process processes[], int numProcesses, int waitingTime[], int turnaroundTime[]) {
    for (int i = 0; i < numProcesses; i++) {
        turnaroundTime[i] = processes[i].burstTime + waitingTime[i];
    }
}
