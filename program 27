#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t semaphore;

void* process(void* processName) {
    char* name = (char*) processName;
    
    printf("%s is waiting on semaphore S.\n", name);
    sem_wait(&semaphore);

    printf("%s enters the critical section.\n", name);
    printf("%s is performing some operations.\n", name);
    printf("%s leaves the critical section.\n", name);

    if (strcmp(name, "P5") == 0) {
        printf("%s is signaling another process.\n", name);
        sem_post(&semaphore);
    }

    pthread_exit(NULL);
}

int main() {
    sem_init(&semaphore, 0, 4); 

    pthread_t threads[5];
    char* processNames[5] = {"P1", "P2", "P3", "P4", "P5"};

    for (int i = 0; i < 4; i++) {
        pthread_create(&threads[i], NULL, process, (void*) processNames[i]);
    }

    pthread_create(&threads[4], NULL, process, (void*) processNames[4]);

    for (int i = 0; i < 5; i++) {
        pthread_join(threads[i], NULL);
    }

    sem_destroy(&semaphore);

    return 0;
}
