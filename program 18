#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 3
#define NUM_ITEMS 4

int buffer[BUFFER_SIZE];
int count = 0;
int in = 0;
int out = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t buffer_full = PTHREAD_COND_INITIALIZER;
pthread_cond_t buffer_empty = PTHREAD_COND_INITIALIZER;

// Producer thread function
void *producer(void *arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        pthread_mutex_lock(&mutex);

        // Wait if the buffer is full
        while (count == BUFFER_SIZE) {
            pthread_cond_wait(&buffer_full, &mutex);
        }

        // Produce an item
        buffer[in] = i;
        in = (in + 1) % BUFFER_SIZE;
        count++;

        printf("Produced item %d\n", i);

        // Signal that the buffer is not empty
        pthread_cond_signal(&buffer_empty);
        pthread_mutex_unlock(&mutex);
    }

    pthread_exit(NULL);
}

// Consumer thread function
void *consumer(void *arg) {
    pthread_mutex_lock(&mutex);

    // Wait if the buffer is empty
    while (count == 0) {
        pthread_cond_wait(&buffer_empty, &mutex);
    }

    // Consume an item
    int item = buffer[out];
    out = (out + 1) % BUFFER_SIZE;
    count--;

    printf("Consumed item %d\n", item);

    // Signal that the buffer is not full
    pthread_cond_signal(&buffer_full);
    pthread_mutex_unlock(&mutex);

    pthread_exit(NULL);
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // Create the producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for the threads to finish
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    return 0;
}
